import React, { useState, useRef, useEffect } from 'react'

const PodcastMode = ({ analysis, outline }) => {
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentSection, setCurrentSection] = useState(0)
  const [podcastScript, setPodcastScript] = useState([])
  const [playbackSpeed, setPlaybackSpeed] = useState(1.0)
  const [currentTime, setCurrentTime] = useState(0)
  const [duration, setDuration] = useState(0)
  const speechSynthesis = useRef(window.speechSynthesis)
  const currentUtterance = useRef(null)

  useEffect(() => {
    if (analysis && outline) {
      generateGeminiPodcastScript()
    }
  }, [analysis, outline])

  const generateGeminiPodcastScript = () => {
    const script = [
      {
        title: "Gemini AI Introduction",
        content: `Welcome to your AI-powered document analysis, enhanced by Google's Gemini AI. Today we're analyzing: ${outline?.title || 'your document'}. This document has ${outline?.outline?.length || 0} main sections across ${analysis?.document_info?.page_count || 0} pages. Our analysis is powered by ${analysis?.metadata?.ai_model || 'Gemini 2.5 Flash'}.`,
        duration: 20
      },
      {
        title: "Document Overview",
        content: `Let me give you a comprehensive summary generated by Gemini AI: ${analysis?.summary || 'This document contains important information relevant to your selected persona.'}`,
        duration: 25
      }
    ]

    // Add persona-specific analysis
    if (analysis?.metadata?.persona) {
      script.push({
        title: `${analysis.metadata.persona} Perspective`,
        content: `From a ${analysis.metadata.persona} perspective, this document has a relevance score of ${analysis?.metadata?.relevance_score ? (analysis.metadata.relevance_score * 100).toFixed(0) + '%' : 'high relevance'}. Gemini AI has tailored this analysis specifically for your professional role.`,
        duration: 15
      })
    }

    // Add section-by-section breakdown
    if (outline?.outline) {
      outline.outline.forEach((section, index) => {
        script.push({
          title: `Section ${index + 1}: ${section.text}`,
          content: `Moving to ${section.text} on page ${section.page}. This is a ${section.level} heading, indicating its importance in the document structure. Gemini AI has identified this as a key organizational element.`,
          duration: 12
        })
      })
    }

    // Add Gemini-generated insights
    if (analysis?.insights?.insights) {
      script.push({
        title: "Gemini AI Key Insights",
        content: `Here are the key insights discovered by Gemini AI: ${analysis.insights.insights.join('. ')}`,
        duration: 30
      })
    }

    // Add interesting fact
    if (analysis?.insights?.fact) {
      script.push({
        title: "Gemini Discovery",
        content: `Here's an interesting discovery from Gemini AI: ${analysis.insights.fact}`,
        duration: 12
      })
    }

    // Add contradictions if found
    if (analysis?.insights?.contradiction && analysis.insights.contradiction !== "No contradictions found") {
      script.push({
        title: "Critical Analysis",
        content: `Gemini AI has identified an important consideration: ${analysis.insights.contradiction}`,
        duration: 15
      })
    }

    // Add inspiration/connections
    if (analysis?.insights?.inspiration) {
      script.push({
        title: "Professional Insights",
        content: `Gemini AI suggests: ${analysis.insights.inspiration}`,
        duration: 12
      })
    }

    // Add conclusion
    script.push({
      title: "Gemini AI Conclusion",
      content: `That concludes your document analysis powered by Google's Gemini AI. The key themes identified were: ${analysis?.document_info?.keywords?.slice(0, 3).join(', ') || 'comprehensive analysis and insights'}. Thank you for using our Gemini-powered PDF AI Assistant.`,
      duration: 18
    })

    setPodcastScript(script)
    setDuration(script.reduce((total, section) => total + section.duration, 0))
  }

  const playPodcast = () => {
    if (podcastScript.length === 0) return

    setIsPlaying(true)
    speakSection(currentSection)
  }

  const speakSection = (sectionIndex) => {
    if (sectionIndex >= podcastScript.length) {
      setIsPlaying(false)
      setCurrentSection(0)
      setCurrentTime(0)
      return
    }

    const section = podcastScript[sectionIndex]
    const utterance = new SpeechSynthesisUtterance(section.content)
    
    utterance.rate = playbackSpeed
    utterance.pitch = 1.0
    utterance.volume = 1.0

    utterance.onend = () => {
      if (isPlaying) {
        const nextSection = sectionIndex + 1
        setCurrentSection(nextSection)
        setCurrentTime(currentTime + section.duration)
        
        setTimeout(() => {
          if (isPlaying) speakSection(nextSection)
        }, 500)
      }
    }

    currentUtterance.current = utterance
    speechSynthesis.current.speak(utterance)
  }

  const pausePodcast = () => {
    setIsPlaying(false)
    speechSynthesis.current.cancel()
  }

  const restartPodcast = () => {
    speechSynthesis.current.cancel()
    setCurrentSection(0)
    setCurrentTime(0)
    setIsPlaying(false)
  }

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
      <h3 className="text-xl font-semibold text-white mb-6 flex items-center">
        <span className="text-2xl mr-3">ðŸŽ§</span>
        Gemini AI Podcast Mode
        <span className="ml-auto text-sm text-red-400">Powered by Gemini</span>
      </h3>

      {/* Podcast Player */}
      <div className="bg-gray-900 rounded-lg p-4 mb-6">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h4 className="text-white font-medium">Gemini AI Document Analysis</h4>
            <p className="text-gray-400 text-sm">
              {podcastScript[currentSection]?.title || 'Ready to start'}
            </p>
          </div>
          <div className="text-right">
            <div className="text-white text-sm">{formatTime(currentTime)} / {formatTime(duration)}</div>
            <div className="text-gray-400 text-xs">
              Section {currentSection + 1} of {podcastScript.length}
            </div>
          </div>
        </div>

        {/* Progress Bar */}
        <div className="w-full bg-gray-700 rounded-full h-2 mb-4">
          <div 
            className="bg-red-600 h-2 rounded-full transition-all duration-500"
            style={{ width: `${duration > 0 ? (currentTime / duration) * 100 : 0}%` }}
          ></div>
        </div>

        {/* Controls */}
        <div className="flex items-center justify-center space-x-4">
          <button
            onClick={restartPodcast}
            className="p-2 rounded-full bg-gray-700 text-white hover:bg-gray-600"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </button>

          <button
            onClick={isPlaying ? pausePodcast : playPodcast}
            disabled={podcastScript.length === 0}
            className="p-3 rounded-full bg-red-600 text-white hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed"
          >
            {isPlaying ? (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            ) : (
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m2 4H7a2 2 0 01-2-2V8a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2z" />
              </svg>
            )}
          </button>

          <select
            value={playbackSpeed}
            onChange={(e) => setPlaybackSpeed(parseFloat(e.target.value))}
            className="p-2 rounded bg-gray-700 text-white text-sm border border-gray-600"
          >
            <option value={0.5}>0.5x</option>
            <option value={0.75}>0.75x</option>
            <option value={1.0}>1x</option>
            <option value={1.25}>1.25x</option>
            <option value={1.5}>1.5x</option>
            <option value={2.0}>2x</option>
          </select>
        </div>
      </div>

      {/* Gemini-Enhanced Transcript */}
      <div className="space-y-3 max-h-64 overflow-y-auto">
        <h4 className="text-white font-medium border-b border-gray-600 pb-2 flex items-center">
          <span className="mr-2">ðŸ“œ</span>
          Gemini AI Transcript
        </h4>
        {podcastScript.map((section, index) => (
          <div 
            key={index} 
            className={`p-3 rounded border ${
              index === currentSection && isPlaying
                ? 'bg-red-600/10 border-red-600/30 text-white'
                : 'bg-gray-900 border-gray-700 text-gray-300'
            }`}
          >
            <div className="font-medium text-sm mb-1 flex items-center">
              {section.title}
              {section.title.includes('Gemini') && (
                <span className="ml-2 text-xs bg-red-600/20 text-red-400 px-2 py-1 rounded">AI</span>
              )}
            </div>
            <div className="text-xs">{section.content}</div>
          </div>
        ))}
      </div>
    </div>
  )
}

export default PodcastMode
