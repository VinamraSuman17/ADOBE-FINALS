// import React, { useState, useRef, useEffect } from 'react'

// const PodcastMode = ({ analysis, outline }) => {
//   const [isPlaying, setIsPlaying] = useState(false)
//   const [currentSection, setCurrentSection] = useState(0)
//   const [podcastScript, setPodcastScript] = useState([])
//   const [playbackSpeed, setPlaybackSpeed] = useState(1.0)
//   const [currentTime, setCurrentTime] = useState(0)
//   const [duration, setDuration] = useState(0)
//   const speechSynthesis = useRef(window.speechSynthesis)
//   const currentUtterance = useRef(null)

//   useEffect(() => {
//     if (analysis && outline) {
//       generateGeminiPodcastScript()
//     }
//   }, [analysis, outline])

//   const generateGeminiPodcastScript = () => {
//     const script = [
//       {
//         title: "Gemini AI Introduction",
//         content: `Welcome to your AI-powered document analysis, enhanced by Google's Gemini AI. Today we're analyzing: ${outline?.title || 'your document'}. This document has ${outline?.outline?.length || 0} main sections across ${analysis?.document_info?.page_count || 0} pages. Our analysis is powered by ${analysis?.metadata?.ai_model || 'Gemini 2.5 Flash'}.`,
//         duration: 20
//       },
//       {
//         title: "Document Overview",
//         content: `Let me give you a comprehensive summary generated by Gemini AI: ${analysis?.summary || 'This document contains important information relevant to your selected persona.'}`,
//         duration: 25
//       }
//     ]

//     // Add persona-specific analysis
//     if (analysis?.metadata?.persona) {
//       script.push({
//         title: `${analysis.metadata.persona} Perspective`,
//         content: `From a ${analysis.metadata.persona} perspective, this document has a relevance score of ${analysis?.metadata?.relevance_score ? (analysis.metadata.relevance_score * 100).toFixed(0) + '%' : 'high relevance'}. Gemini AI has tailored this analysis specifically for your professional role.`,
//         duration: 15
//       })
//     }

//     // Add section-by-section breakdown
//     if (outline?.outline) {
//       outline.outline.forEach((section, index) => {
//         script.push({
//           title: `Section ${index + 1}: ${section.text}`,
//           content: `Moving to ${section.text} on page ${section.page}. This is a ${section.level} heading, indicating its importance in the document structure. Gemini AI has identified this as a key organizational element.`,
//           duration: 12
//         })
//       })
//     }

//     // Add Gemini-generated insights
//     if (analysis?.insights?.insights) {
//       script.push({
//         title: "Gemini AI Key Insights",
//         content: `Here are the key insights discovered by Gemini AI: ${analysis.insights.insights.join('. ')}`,
//         duration: 30
//       })
//     }

//     // Add interesting fact
//     if (analysis?.insights?.fact) {
//       script.push({
//         title: "Gemini Discovery",
//         content: `Here's an interesting discovery from Gemini AI: ${analysis.insights.fact}`,
//         duration: 12
//       })
//     }

//     // Add contradictions if found
//     if (analysis?.insights?.contradiction && analysis.insights.contradiction !== "No contradictions found") {
//       script.push({
//         title: "Critical Analysis",
//         content: `Gemini AI has identified an important consideration: ${analysis.insights.contradiction}`,
//         duration: 15
//       })
//     }

//     // Add inspiration/connections
//     if (analysis?.insights?.inspiration) {
//       script.push({
//         title: "Professional Insights",
//         content: `Gemini AI suggests: ${analysis.insights.inspiration}`,
//         duration: 12
//       })
//     }

//     // Add conclusion
//     script.push({
//       title: "Gemini AI Conclusion",
//       content: `That concludes your document analysis powered by Google's Gemini AI. The key themes identified were: ${analysis?.document_info?.keywords?.slice(0, 3).join(', ') || 'comprehensive analysis and insights'}. Thank you for using our Gemini-powered PDF AI Assistant.`,
//       duration: 18
//     })

//     setPodcastScript(script)
//     setDuration(script.reduce((total, section) => total + section.duration, 0))
//   }

//   const playPodcast = () => {
//     if (podcastScript.length === 0) return

//     setIsPlaying(true)
//     speakSection(currentSection)
//   }

//   const speakSection = (sectionIndex) => {
//     if (sectionIndex >= podcastScript.length) {
//       setIsPlaying(false)
//       setCurrentSection(0)
//       setCurrentTime(0)
//       return
//     }

//     const section = podcastScript[sectionIndex]
//     const utterance = new SpeechSynthesisUtterance(section.content)
    
//     utterance.rate = playbackSpeed
//     utterance.pitch = 1.0
//     utterance.volume = 1.0

//     utterance.onend = () => {
//       if (isPlaying) {
//         const nextSection = sectionIndex + 1
//         setCurrentSection(nextSection)
//         setCurrentTime(currentTime + section.duration)
        
//         setTimeout(() => {
//           if (isPlaying) speakSection(nextSection)
//         }, 500)
//       }
//     }

//     currentUtterance.current = utterance
//     speechSynthesis.current.speak(utterance)
//   }

//   const pausePodcast = () => {
//     setIsPlaying(false)
//     speechSynthesis.current.cancel()
//   }

//   const restartPodcast = () => {
//     speechSynthesis.current.cancel()
//     setCurrentSection(0)
//     setCurrentTime(0)
//     setIsPlaying(false)
//   }

//   const formatTime = (seconds) => {
//     const mins = Math.floor(seconds / 60)
//     const secs = Math.floor(seconds % 60)
//     return `${mins}:${secs.toString().padStart(2, '0')}`
//   }

//   return (
//     <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
//       <h3 className="text-xl font-semibold text-white mb-6 flex items-center">
//         <span className="text-2xl mr-3">ðŸŽ§</span>
//         Gemini AI Podcast Mode
//         <span className="ml-auto text-sm text-red-400">Powered by Gemini</span>
//       </h3>

//       {/* Podcast Player */}
//       <div className="bg-gray-900 rounded-lg p-4 mb-6">
//         <div className="flex items-center justify-between mb-4">
//           <div>
//             <h4 className="text-white font-medium">Gemini AI Document Analysis</h4>
//             <p className="text-gray-400 text-sm">
//               {podcastScript[currentSection]?.title || 'Ready to start'}
//             </p>
//           </div>
//           <div className="text-right">
//             <div className="text-white text-sm">{formatTime(currentTime)} / {formatTime(duration)}</div>
//             <div className="text-gray-400 text-xs">
//               Section {currentSection + 1} of {podcastScript.length}
//             </div>
//           </div>
//         </div>

//         {/* Progress Bar */}
//         <div className="w-full bg-gray-700 rounded-full h-2 mb-4">
//           <div 
//             className="bg-red-600 h-2 rounded-full transition-all duration-500"
//             style={{ width: `${duration > 0 ? (currentTime / duration) * 100 : 0}%` }}
//           ></div>
//         </div>

//         {/* Controls */}
//         <div className="flex items-center justify-center space-x-4">
//           <button
//             onClick={restartPodcast}
//             className="p-2 rounded-full bg-gray-700 text-white hover:bg-gray-600"
//           >
//             <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
//             </svg>
//           </button>

//           <button
//             onClick={isPlaying ? pausePodcast : playPodcast}
//             disabled={podcastScript.length === 0}
//             className="p-3 rounded-full bg-red-600 text-white hover:bg-red-700 disabled:bg-gray-600 disabled:cursor-not-allowed"
//           >
//             {isPlaying ? (
//               <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z" />
//               </svg>
//             ) : (
//               <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m2 4H7a2 2 0 01-2-2V8a2 2 0 012-2h10a2 2 0 012 2v8a2 2 0 01-2 2z" />
//               </svg>
//             )}
//           </button>

//           <select
//             value={playbackSpeed}
//             onChange={(e) => setPlaybackSpeed(parseFloat(e.target.value))}
//             className="p-2 rounded bg-gray-700 text-white text-sm border border-gray-600"
//           >
//             <option value={0.5}>0.5x</option>
//             <option value={0.75}>0.75x</option>
//             <option value={1.0}>1x</option>
//             <option value={1.25}>1.25x</option>
//             <option value={1.5}>1.5x</option>
//             <option value={2.0}>2x</option>
//           </select>
//         </div>
//       </div>

//       {/* Gemini-Enhanced Transcript */}
//       <div className="space-y-3 max-h-64 overflow-y-auto">
//         <h4 className="text-white font-medium border-b border-gray-600 pb-2 flex items-center">
//           <span className="mr-2">ðŸ“œ</span>
//           Gemini AI Transcript
//         </h4>
//         {podcastScript.map((section, index) => (
//           <div 
//             key={index} 
//             className={`p-3 rounded border ${
//               index === currentSection && isPlaying
//                 ? 'bg-red-600/10 border-red-600/30 text-white'
//                 : 'bg-gray-900 border-gray-700 text-gray-300'
//             }`}
//           >
//             <div className="font-medium text-sm mb-1 flex items-center">
//               {section.title}
//               {section.title.includes('Gemini') && (
//                 <span className="ml-2 text-xs bg-red-600/20 text-red-400 px-2 py-1 rounded">AI</span>
//               )}
//             </div>
//             <div className="text-xs">{section.content}</div>
//           </div>
//         ))}
//       </div>
//     </div>
//   )
// }

// export default PodcastMode



import React, { useState, useRef, useEffect } from 'react'
import { Play, Pause, RotateCcw, Volume2, Clock } from 'lucide-react'

const PodcastMode = ({ analysis, outline, isMultipleFiles, comparison }) => {
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const [totalDuration, setTotalDuration] = useState(0)
  const [podcastScript, setPodcastScript] = useState([])
  const [currentSection, setCurrentSection] = useState(0)
  const speechSynthesis = useRef(window.speechSynthesis)
  const utteranceRef = useRef(null)
  const progressInterval = useRef(null)

  // âœ… Define generateSectionDescription as a regular function inside component
  const generateSectionDescription = (sectionText, persona) => {
    const descriptions = {
      'student': 'important learning content that builds foundational knowledge',
      'business_analyst': 'critical business information for strategic analysis',  
      'researcher': 'valuable research data that supports empirical findings',
      'project_manager': 'essential project information for planning and execution',
      'legal_professional': 'relevant legal information for case preparation',
      'financial_analyst': 'financial data important for quantitative analysis'
    }
    return descriptions[persona] || 'significant information relevant to your analysis'
  }

  useEffect(() => {
    if ((analysis && outline) || (isMultipleFiles && comparison)) {
      generateComprehensivePodcastScript()
    }
  }, [analysis, outline, isMultipleFiles, comparison])

  const generateComprehensivePodcastScript = () => {
    const script = []
    
    if (isMultipleFiles && comparison) {
      // Multi-file podcast script
      script.push({
        title: "Introduction",
        content: `Welcome to your comprehensive document analysis. Today we're analyzing ${comparison.total_files || 'multiple'} documents from a ${comparison.persona || 'professional'} perspective.`,
        duration: 8
      })

      script.push({
        title: "Overview",
        content: `${comparison.overview || 'We have completed a comparative analysis of your documents, identifying key themes and patterns across all files.'}`,
        duration: 12
      })

      if (comparison.common_themes && comparison.common_themes.length > 0) {
        script.push({
          title: "Common Themes",
          content: `Across all documents, we identified several recurring themes: ${comparison.common_themes.slice(0, 5).join(', ')}. These themes show consistent patterns in your document collection.`,
          duration: 15
        })
      }

      if (comparison.persona_relevance_comparison) {
        const topDoc = comparison.persona_relevance_comparison[0]
        script.push({
          title: "Top Performing Document",
          content: `The highest rated document for your ${comparison.persona} perspective is ${topDoc?.filename || 'the first document'} with a relevance score of ${Math.round((topDoc?.score || 0.75) * 100)}%.`,
          duration: 10
        })
      }
    } else {
      // Single file podcast script
      script.push({
        title: "Introduction",  
        content: `Welcome to your AI-powered document analysis. Today we're exploring: ${outline?.title || 'your document'} from a ${analysis?.metadata?.persona || 'professional'} perspective.`,
        duration: 8
      })

      script.push({
        title: "Document Overview",
        content: `This document contains ${outline?.outline?.length || 0} main sections across ${analysis?.document_info?.page_count || 'multiple'} pages. ${analysis?.summary || 'The content provides valuable insights for analysis.'}`,
        duration: 15
      })

      // Add sections from outline
      if (outline?.outline && outline.outline.length > 0) {
        const sectionsToInclude = outline.outline.slice(0, 5) // Limit to 5 sections
        sectionsToInclude.forEach((section, index) => {
          script.push({
            title: section.text,
            // âœ… Call generateSectionDescription correctly (without this.)
            content: `Section ${index + 1}: ${section.text}, found on page ${section.page}. This ${section.level.toLowerCase()} heading indicates ${generateSectionDescription(section.text, analysis?.metadata?.persona)}.`,
            duration: 12
          })
        })
      }

      if (analysis?.insights?.insights && analysis.insights.insights.length > 0) {
        script.push({
          title: "Key Insights",
          content: `Here are the key insights for ${analysis.metadata.persona}: ${analysis.insights.insights.join('. ')}.`,
          duration: 20
        })
      }

      if (analysis?.insights?.fact) {
        script.push({
          title: "Interesting Fact",
          content: `Did you know? ${analysis.insights.fact}`,
          duration: 8
        })
      }
    }

    script.push({
      title: "Conclusion",
      content: `This concludes your comprehensive document analysis. The insights provided should help guide your ${analysis?.metadata?.persona || comparison?.persona || 'professional'} decision-making process.`,
      duration: 10
    })

    setPodcastScript(script)
    setTotalDuration(script.reduce((total, section) => total + section.duration, 0))
  }

  const playPodcast = () => {
    if (podcastScript.length === 0) return

    setIsPlaying(true)
    setCurrentSection(0)
    playSection(0)
  }

  const playSection = (sectionIndex) => {
    if (sectionIndex >= podcastScript.length) {
      setIsPlaying(false)
      setCurrentSection(0)
      setCurrentTime(0)
      return
    }

    const section = podcastScript[sectionIndex]
    setCurrentSection(sectionIndex)
    
    const utterance = new SpeechSynthesisUtterance(section.content)
    utterance.rate = 1.0
    utterance.pitch = 1.0
    utterance.volume = 1.0

    utterance.onstart = () => {
      startProgressTracking(section.duration)
    }

    utterance.onend = () => {
      clearInterval(progressInterval.current)
      // Auto-play next section
      setTimeout(() => {
        if (isPlaying) {
          playSection(sectionIndex + 1)
        }
      }, 500)
    }

    utteranceRef.current = utterance
    speechSynthesis.current.speak(utterance)
  }

  const startProgressTracking = (duration) => {
    let elapsed = 0
    progressInterval.current = setInterval(() => {
      elapsed += 0.1
      setCurrentTime(prev => {
        const newTime = prev + 0.1
        return newTime >= totalDuration ? totalDuration : newTime
      })
      
      if (elapsed >= duration) {
        clearInterval(progressInterval.current)
      }
    }, 100)
  }

  const pausePodcast = () => {
    setIsPlaying(false)
    speechSynthesis.current.cancel()
    clearInterval(progressInterval.current)
  }

  const resetPodcast = () => {
    pausePodcast()
    setCurrentTime(0)
    setCurrentSection(0)
  }

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = Math.floor(seconds % 60)
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  const progressPercentage = totalDuration > 0 ? (currentTime / totalDuration) * 100 : 0

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
      <div className="flex items-center space-x-2 mb-6">
        <Volume2 className="text-red-600" size={20} />
        <h3 className="text-xl font-semibold text-white">Audio Summary</h3>
      </div>

      {/* Audio Player */}
      <div className="bg-gray-900 rounded-lg p-6 mb-6 border border-gray-600">
        {/* Progress Bar */}
        <div className="mb-6">
          <div className="flex justify-between text-sm text-gray-400 mb-2">
            <span>{formatTime(currentTime)}</span>
            <span>{formatTime(totalDuration)}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2">
            <div 
              className="bg-red-600 h-2 rounded-full transition-all duration-300 ease-out"
              style={{ width: `${progressPercentage}%` }}
            />
          </div>
        </div>

        {/* Controls */}
        <div className="flex items-center justify-center space-x-4">
          <button
            onClick={resetPodcast}
            className="p-3 rounded-full bg-gray-700 text-gray-300 hover:bg-gray-600 hover:text-white transition-colors"
            title="Reset"
          >
            <RotateCcw size={18} />
          </button>
          
          <button
            onClick={isPlaying ? pausePodcast : playPodcast}
            disabled={podcastScript.length === 0}
            className="p-4 rounded-full bg-red-600 text-white hover:bg-red-700 disabled:bg-gray-600 transition-colors"
            title={isPlaying ? "Pause" : "Play"}
          >
            {isPlaying ? <Pause size={24} /> : <Play size={24} />}
          </button>

          <div className="flex items-center space-x-2 text-gray-400">
            <Clock size={16} />
            <span className="text-sm">
              {totalDuration > 0 ? `${Math.ceil(totalDuration / 60)} min` : 'Calculating...'}
            </span>
          </div>
        </div>

        {/* Current Section Indicator */}
        {isPlaying && podcastScript[currentSection] && (
          <div className="mt-4 text-center">
            <div className="inline-flex items-center space-x-2 bg-red-600/20 rounded-full px-4 py-2 border border-red-600/30">
              <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse" />
              <span className="text-red-300 text-sm font-medium">
                Now playing: {podcastScript[currentSection].title}
              </span>
            </div>
          </div>
        )}
      </div>

      {/* Script Sections */}
      <div className="space-y-3 max-h-64 overflow-y-auto">
        <div className="flex items-center space-x-2 mb-3">
          <Clock className="text-blue-400" size={16} />
          <h4 className="text-white font-medium">Script Outline</h4>
        </div>
        {podcastScript.map((section, index) => (
          <div 
            key={index} 
            className={`p-3 rounded border transition-all ${
              currentSection === index && isPlaying 
                ? 'bg-red-900/30 border-red-600/50' 
                : 'bg-gray-900 border-gray-700'
            }`}
          >
            <div className="flex items-center justify-between mb-1">
              <div className="font-medium text-sm text-white">{section.title}</div>
              <div className="text-xs text-gray-500">
                {Math.ceil(section.duration)}s
              </div>
            </div>
            <div className="text-xs text-gray-300 leading-relaxed">
              {section.content}
            </div>
            {currentSection === index && isPlaying && (
              <div className="mt-2 flex items-center space-x-2">
                <div className="w-1 h-1 bg-red-400 rounded-full animate-pulse" />
                <span className="text-xs text-red-400">Currently playing</span>
              </div>
            )}
          </div>
        ))}
      </div>

      {/* Info */}
      <div className="mt-4 p-3 bg-gray-700 rounded border border-gray-600">
        <div className="flex items-center space-x-2 text-gray-400 text-sm">
          <Volume2 size={14} />
          <span>
            Audio summary includes {podcastScript.length} sections â€¢ 
            Estimated duration: {Math.ceil(totalDuration / 60)} minutes â€¢ 
            Optimized for {analysis?.metadata?.persona || comparison?.persona || 'professional'} perspective
          </span>
        </div>
      </div>
    </div>
  )
}

export default PodcastMode
